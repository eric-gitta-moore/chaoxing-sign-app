<template>
	<view>
		<u--form :model="formData" :rules="rules" class="u--form" ref="form1">
			<u-form-item labelWidth="70px" label="账号" prop="userInfo.account" borderBottom>
				<u--input placeholder="手机号/超星号" v-model="formData.userInfo.account" clearable></u--input>
			</u-form-item>
			<u-form-item labelWidth="70px" label="密码" prop="userInfo.pwd" borderBottom>
				<u--input clearable v-model="formData.userInfo.pwd" type="password"></u--input>
			</u-form-item>
			<!-- <u-form-item v-if="false" labelWidth="70px" label="验证码" prop="code">
				<u--input clearable v-model="formData.code">
					<template slot="prefix">
						<u--image :showLoading="true" :src="codeBase64" width="123px" height="40px"
							@click="getLoginCodeBase64"></u--image>
					</template>
				</u--input>
			</u-form-item> -->
			<u-button type="primary" text="登录" customStyle="margin-top: 50px" @click="submit"></u-button>
			<u-button type="error" :plain="true" text="忘记密码" customStyle="margin-top: 10px" @click="forgotPasswd">
			</u-button>
		</u--form>
		<!-- <u-toast ref="uToast"></u-toast> -->
	</view>
</template>

<script>
	import userBiz from '@/biz/user.js'
	import {
		mapGetters
	} from 'vuex'
	export default {
		data() {
			return {
				// 校验规则
				rules: {
					'userInfo.account': {
						required: true,
						message: '账号不能为空',
						transform(v) {
							return String(v).trim()
						},
					},
					'userInfo.pwd': {
						required: true,
						message: '密码不能为空',
						transform(v) {
							return String(v).trim()
						},
					},
					'code': {
						required: true,
						message: '验证码不能为空',
						transform(v) {
							return String(v).trim()
						},
					}
				},
				formData: {
					userInfo: {
						account: '',
						pwd: '',
					},
					code: '',
				},
				codeBase64: '',
			};
		},
		methods: {
			async submit() {
				try {
					await this.$refs.form1.validate()
					this.login(this.formData)
				} catch (e) {}
			},
			async login(res) {
				return await userBiz.doLogin(this, {
					account: res.userInfo.account,
					pwd: res.userInfo.pwd
				}, '登录成功', '正在登陆中')
				// let r = await this.$store.dispatch('user/login', res)
				// if (r?.status === false) {
				// 	this.$refs.uToast.show({
				// 		message: r.msg2,
				// 		type: 'error',
				// 		duration: 1000,
				// 	})
				// 	return;
				// }
				// let user = await this.$store.dispatch('user/getUserInfo', true)
				// let appendAccount = {
				// 	...res.userInfo,
				// 	name: user.name
				// }
				// console.log('appendAccount', appendAccount)
				// this.$store.dispatch('userManagement/appendAccount', appendAccount)

				// this.$refs.uToast.show({
				// 	message: `你好，${user.name}`,
				// 	type: 'success',
				// 	duration: 1000,
				// 	complete() {
				// 		uni.reLaunch({
				// 			url: '/pages/user/user'
				// 		})
				// 	}
				// })
			},
			async getLoginCodeBase64() {
				this.codeBase64 = await userBiz.getLoginCode();
			},
			forgotPasswd() {
				plus.nativeUI.confirm("这里的账号密码和学习通网页版一样\n如果忘记密码可以去学习通网页版找回", e => {
					if (e.index === 0) {
						plus.runtime.openURL("http://i.chaoxing.com/")
					}
				}, {
					"buttons": ["打开学习通网页版", "取消"],
				})
			}
		},
		created() {
			this.getLoginCodeBase64()
		}
	}
</script>

<style lang="scss" scoped>
	.u--form {
		padding: 10px 20px;
	}
</style>
