<template>

	<view class="content">
		<u-popup :show="isShowMultiUserPanel" mode='right' @open="onOpenMultiUserPanel" @close="onCloseMultiUserPanel">
			<view :style="{width:'480rpx'}">

				<uni-swipe-action>
					<uni-swipe-action-item :right-options='panelOptions' v-for="(user,index) in multiUserList"
						:key="user.account" @click="onSwipeActionClick($event,index)" :autoClose="true">
						<u-cell-group :border="false">
							<u-cell :title="user.name" :label="user.account" :clickable='true'>
							</u-cell>
						</u-cell-group>
					</uni-swipe-action-item>
					<uni-swipe-action-item>
						<u-cell-group :border="false">
							<u-cell title="添加账号" label="什么!想代签？" :clickable='true' @click="toLogin">
								<u-icon name="plus" slot="right-icon"></u-icon>
							</u-cell>
						</u-cell-group>
					</uni-swipe-action-item>
				</uni-swipe-action>

			</view>
		</u-popup>
		<z-paging ref="paging" @onRefresh="onrefresh" show-refresher-update-time>
			<cell>
				<view class="container">
					<view class="main">
						<view class="avatar">
							<u-avatar :src="getUserInfoField(`avatar`)" class="avatarImg" size="150"
								@click="showMyAvatar"></u-avatar>
						</view>
						<u-cell-group>
							<u-cell v-for="item in infoList" :title="item.title" :label="getUserInfoField(item.field)"
								:clickable="true" size='large' @click="toClipboard(item)">
							</u-cell>
							<u-cell title="浅分享一下APP吧!" size='large' :isLink="true" @click="shareApp"></u-cell>
							<u-cell title="GitHub仓库" size='large' :isLink="true" @click="gotoGithub"></u-cell>
						</u-cell-group>
					</view>
					<u-button class="loginBtn" type="primary" @click="toLogin" text="登陆/重新登录"></u-button>
				</view>
			</cell>
		</z-paging>
	</view>
</template>

<script>
	import UserBiz from '@/biz/user.js'
	import UserEntity from '@/entity/User.js'
	import {
		mapGetters,
		mapState
	} from 'vuex'

	export default {
		data() {
			return {
				infoList: [{
						title: '姓名',
						field: 'name',
					},
					{
						title: '性别',
						field: 'sex',
					},
					{
						title: '学号',
						field: 'numberCard',
					},
					{
						title: '手机号',
						field: 'phone',
					},
					{
						title: '学校',
						field: 'school',
					},
				],
				isShowMultiUserPanel: false,
				panelOptions: [{
					text: '登录',
					style: {
						backgroundColor: '#3c9cff'
					}
				}, {
					text: '删除',
					style: {
						backgroundColor: '#f56c6c'
					}
				}, ]

			};
		},
		computed: {
			...mapGetters({
				userInfo: 'user/userEntity'
			}),
			...mapState({
				multiUserList: s => s.userManagement.userList
			})
		},
		methods: {
			getUserInfoField(name) {
				try {
					return this.userInfo[name]
				} catch (e) {

				}
				return ''
			},
			shareApp() {
				plus.nativeUI.alert("一款好的APP才不会内置这样的功能嗷！谢谢您的使用！", () => {}, "温馨提示")
			},
			gotoGithub() {
				let url = 'https://github.com/james-curtis/chaoxing-sign-app'
				plus.nativeUI.confirm(url, function(e) {
					console.log("plus.nativeUI.confirm", e)
					if (e.index == 0) {
						plus.runtime.openURL(url)
					} else if (e.index == 1) {
						uni.setClipboardData({
							data: url
						})
					}
				}, {
					"title": "GitHub仓库地址",
					"buttons": ["打开", "复制"],
				});
			},
			toLogin() {
				uni.navigateTo({
					url: 'login'
				})
			},
			async initUserInfo() {
				this.$store.dispatch('user/getUserInfo')
				this.$store.dispatch('userManagement/__initOnce')

			},
			onrefresh() {
				this.$store.dispatch('user/getUserInfo', true).then(() => {
					console.log(this.userInfo)
				})
			},
			showMyAvatar() {
				uni.previewImage({
					urls: [this.getUserInfoField('avatar')]
				})
			},
			toClipboard(target) {
				uni.setClipboardData({
					data: this.getUserInfoField(target.field),
					showToast: true
				})
			},
			onCloseMultiUserPanel() {
				this.isShowMultiUserPanel = false
			},
			onOpenMultiUserPanel() {},
			async loginAs({
				account,
				pwd
			}) {
				console.log(`%c loginAs.UserBiz.doLogin`, `color:skyblue`, {
					account,
					pwd
				})
				let r = UserBiz.doLogin(this, {
					account,
					pwd
				})
				if (r === false) return false;
				uni.showToast({
					title: '切换成功',
					icon: 'success',
					success: () => {
						uni.reLaunch({
							url: '/pages/user/user',
						})
					}
				})
				return true
			},
			onSwipeActionClick(e, index) {
				console.log('onSwipeActionClick', e, index)
				if (e.index === 0) {
					// 切换账号
					this.loginAs(this.multiUserList[index]).then(r => {
						this.isShowMultiUserPanel = false
					})
				} else if (e.index === 1) {
					// 删除账号
					this.$store.dispatch('userManagement/deleteAccounts', [this.multiUserList[index]]).then(r=>{
						uni.showToast({
							title:'删除成功',
							icon:'success',
						})
					})
				}

			}
		},
		onLoad() {
			this.initUserInfo()
		},
		onNavigationBarButtonTap(e) {
			console.log('onNavigationBarButtonTap', e, 'this.isShowMultiUserPanel', this.isShowMultiUserPanel,
				'multiUserList', this.multiUserList, this.$store.state.userManagement.userList)
			if (e.index === 0) {
				this.isShowMultiUserPanel = !this.isShowMultiUserPanel
			}
		},
	}
</script>

<style lang="scss" scoped>
	.container {
		padding: 20px;

		.avatar {
			justify-content: center;
			margin: 10rpx 0 30rpx 0;
			flex-direction: row;
		}

		.loginBtn {
			margin-top: 15px;
		}
	}
</style>
