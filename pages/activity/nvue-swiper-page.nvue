<template>

	<view class="content">
		<z-paging ref="paging" v-model="pagingActivityList" @query="freshActivity" :auto='false' :fixed="false"
			show-refresher-when-reload auto-show-back-to-top show-refresher-update-time>
			<cell v-for="(item, index) in pagingActivityList" :key="item.id">
				<view class="list-item" :class="isFirst(index)">
					<view class="list-item-header" @click="listItemHeaderOnClickEvent(item)">
						<view class="item-img">
							<u-image class="item-img-img" :src="item.logo"></u-image>
						</view>
						<view class="item-summary">
							<u--text class="summary" :text="clearNewLine(item.nameOne)" :lines="1" wordWrap="anywhere">
							</u--text>
							<u--text class="time" color="#9c9c9c" :text="item.nameFour"></u--text>
						</view>
					</view>
					<u-line margin="5px"></u-line>
					<view class="list-item-body">
						<view class="detail-item" v-if="courseId===0">
							<u--text :text="`科目：`+item.courseInfo.name"></u--text>
						</view>
						<view class="detail-item">
							<u--text :text="`活动ID：${item.id}`"></u--text>
						</view>
						<view class="detail-item" v-if="item.otherId!==null">
							<u--text :text="`otherId：`+item.otherId"></u--text>
						</view>
						<view class="detail-item">
							<u--text :text="`开始时间：`+dateFormat(item.startTime)"></u--text>
						</view>
						<view class="detail-item" v-if="String(item.endTime).trim()!==''">
							<u--text :text="`结束时间：`+dateFormat(item.endTime)"></u--text>
						</view>
					</view>
				</view>
			</cell>
		</z-paging>
	</view>
</template>

<script>
	import {
		mapGetters
	} from 'vuex'
	import DateHelper from '@/util/DateHelper.js'
	import CourseBiz from '@/biz/course.js'
	import ActivityEntity from '@/entity/Activity.js'
	import Constant from '@/const.js'
	let mpaasScanModule = uni.requireNativePlugin("Mpaas-Scan-Module")

	export default {
		props: {
			courseId: {
				type: Number,
				required: true
			},
			classId: {
				type: Number,
				required: true
			},
			currentShowIndex: {
				type: Number,
				required: true
			},
			myIndex: {
				type: Number,
				required: true
			}
		},
		data() {
			return {
				pagingActivityList: [],
				checkedActivity: {},

				actionSheetIsShow: false,
				actionSheetActions: ['普通签到', '拍照签到'],
				isShow: false,
				initDone: false,

			}
		},
		computed: {
			activityList() {
				let r = this.$store.getters['course/activitiesByCourseId'](this.courseId, this.classId)
				console.log(`this.$store.getters['course/activitiesByCourseId'](this.courseId)`, this.courseId, this
					.classId, r, this.$store.state.course.courseList)
				return r
			}
		},
		watch: {
			currentShowIndex: {
				handler: function(newVal) {
					console.log('currentShowIndex', newVal)
					if (newVal == this.myIndex) {
						this.isShow = true
						if (!this.initDone) {
							this.$nextTick(function() {
								this.$refs.paging.reload(true)
								this.initDone = true
							})
						}

					} else this.isShow = false
				},
				immediate: true
			}
		},
		methods: {
			/**
			 * @description 判断当前元素是否为第一个
			 * 修复上下编辑只能有一个的bug
			 * @param {Number} index
			 */
			isFirst: index => index === 0 ? 'first-item' : '',

			/**
			 * @description 格式化字符串
			 * @param {String} date 时间字符串
			 */
			dateFormat(date) {
				return DateHelper.format(new Date(date), 'yyyy-MM-dd hh:mm:ss')
			},

			/**
			 * @description 列表项目被点击事件
			 * @param {ActivityEntity} activity
			 */
			listItemHeaderOnClickEvent(activity) {
				if (!activity?.otherId) return;
				this.chooseSignType(activity)
			},

			/**
			 * @description 刷新所有活动
			 */
			async freshActivity(pageNo, pageSize) {
				if (!this.isShow) return;
				if (pageNo !== 1) {
					this.$refs.paging.complete()
					return
				}
				let list = await this.$store.dispatch('course/getActivitiesOfOneCourse', {
					courseId: this.courseId,
					classId: this.classId
				})
				this.$refs.paging.complete(this.activityList)
			},

			/**
			 * @description 清空文本换行符
			 */
			clearNewLine: text => text.replace(/\r/g, "").replace(/\n/g, ""),

			/**
			 * @description 确认签到的类型
			 * @param {ActivityEntity} activity
			 */
			chooseSignType(activity) {
				this.checkedActivity = activity
				switch (Number(activity.otherId)) {
					case 2: // 二维码签到

						const gotoSign = (code) => {
							let reg = /&enc=(?<enc>[\w\d]+)/
							if (!reg.test(code)) {
								plus.nativeUI.toast('enc匹配失败')
								return null
							}
							let regResult = reg.exec(code)
							console.log(regResult)
							let enc = regResult.groups.enc
							console.log(enc)
							this.allInOneSign(Constant.signType.QRCodeSign, this.checkedActivity, {
								enc
							})
						}
						const chooseImageByDcloudApi = () => {
							uni.chooseImage({
								count: 1,
								success: (res) => {
									console.log(res)
									plus.barcode.scan(res.tempFilePaths[0],
										(type, code) => {
											console.log(code)
											gotoSign(code)
										}, (error) => {
											console.log(error)
											plus.nativeUI.toast('扫码失败')
										})
								}
							})
						}
						const chooseImageByAliMPaas = () => {
							mpaasScanModule.mpaasScan({
									// 扫码识别类型，参数可多选，qrCode、barCode，不设置，默认识别所有
									'scanType': ['qrCode'],
									// 是否隐藏相册，默认false不隐藏
									'hideAlbum': false
								},
								(ret) => {
									// 返回值中，resp_code 表示返回结果值，10：用户取消，11：其他错误，1000：成功
									// 返回值中，resp_message 表示返回结果信息
									// 返回值中，resp_result 表示扫码结果，只有成功才会有返回
									if (ret.resp_code !== 1000) {
										uni.showToast({
											title: ret.resp_message,
											position: 'center'
										})
										return null;
									}
									gotoSign(ret.resp_result)
								})
						}
						const inputEnc = () => {
							uni.showModal({
								content: '请输入签到二维码扫描出来的内容',
								editable: true,
								success: (res) => {
									gotoSign(res.content)
									// let enc = res.content
									// console.log(res.content)
									// let encReg = /&enc=(\w+)/mi
									// if (encReg.test(res.content))
									// 	enc = encReg.exec(res.content)[1]
									// if (res.confirm)
									// 	this.allInOneSign(
									// 		Constant.signType.QRCodeSign,
									// 		this.checkedActivity, {
									// 			enc
									// 		})
								}
							})
						}
						uni.showActionSheet({
							title: '请选择获取二维码信息的方法',
							itemList: ['选择二维码图片', '扫码失败？试试这个', '直接输入enc'],
							success: r => {
								if (Number(r.tapIndex) === 0)
									chooseImageByDcloudApi()
								else if (Number(r.tapIndex === 1))
									chooseImageByAliMPaas()
								else if (Number(r.tapIndex === 2))
									inputEnc()
							itemList: ['选择二维码图片', '直接输入内容或者enc'],
							success: r => {
								if (Number(r.tapIndex) === 0) {
									uni.chooseImage({
										count: 1,
										success: (res) => {
											console.log(res)
											plus.barcode.scan(res.tempFilePaths[0],
												(type, code) => {
													console.log(code)
													let reg = /&enc=(?<enc>[\w\d]+)/
													if (!reg.test(code)) {
														// plus.nativeUI.toast('解码失败')
														uni.showModal({
															title: '解码失败',
															content: '请检查二维码是否正确',
															showCancel: false
														})
														return null
													}
													let regResult = reg.exec(code)
													console.log(regResult)
													let enc = regResult.groups.enc
													console.log(enc)
													this.allInOneSign(
														Constant.signType
														.QRCodeSign,
														this.checkedActivity, {
															enc
														})
												}, (error) => {
													console.log(error)
													// plus.nativeUI.toast('扫码失败')
													uni.showModal({
														title: '扫码失败',
														content: '请用微信或者系统自带的扫码，然后选择第二项直接输入内容进行签到',
														showCancel: false
													})
												})
										}
									})
								} else {
									uni.showModal({
										content: '请输入签到二维码扫描出来的内容',
										editable: true,
										success: (res) => {
											let enc = res.content
											console.log(res.content)
											let encReg = /&enc=(\w+)/mi
											if (encReg.test(res.content))
												enc = encReg.exec(res.content)[1]
											if (res.confirm)
												this.allInOneSign(
													Constant.signType.QRCodeSign,
													this.checkedActivity, {
														enc
													})
										}
									})
								}
							}
						})
						break
					case 4: // 位置签到
						let lastChooseLocation = uni.getStorageSync(Constant.lastChooseLocation)
						console.log(`lastChooseLocation`, lastChooseLocation)
						let obj = {}
						if (lastChooseLocation?.latitude)
							obj = {
								latitude: Number(lastChooseLocation.latitude),
								longitude: Number(lastChooseLocation.longitude)
							}
						uni.chooseLocation({
							...obj,
							success: (res) => {
								console.log('位置名称：' + res.name);
								console.log('详细地址：' + res.address);
								console.log('纬度：' + res.latitude);
								console.log('经度：' + res.longitude);
								uni.setStorage({
									data: res,
									key: Constant.lastChooseLocation
								})
								this.allInOneSign(Constant.signType.locationSign, this
									.checkedActivity, {
										address: res.address,
										latitude: res.latitude,
										longitude: res.longitude
									})
							}
						});
						break
					case 3: // 手势签到
					case 5: // 签到码签到
						this.allInOneSign(Constant.signType.generalSign, this.checkedActivity)
						break
					case 0: // 拍照签到 或者 普通签到
						uni.showActionSheet({
							title: '请选择签到类型',
							itemList: this.actionSheetActions,
							success: this.onActionSheetSelect
						})
						break

				}
			},


			/**
			 * @description 所有签到统一处理
			 * @param {String} type
			 * @param {ActivityEntity} activity
			 * @param {Object} params
			 */
			async allInOneSign(type, activity, params = {}) {
				console.log('allInOneSign.type', type)
				let result = null,
					isShowToast = true;
				switch (type) {
					case Constant.signType.generalSign:
						uni.showLoading({
							title: '签到中',
							mask: true,
						})
						result = await CourseBiz.generalSign(this, activity)
						break;
					case Constant.signType.QRCodeSign:
						uni.showLoading({
							title: '签到中',
							mask: true,
						})
						console.log('allInOneSign.params', params)
						result = await CourseBiz.QRCodeSign(this, activity, params.enc)
						break;
					case Constant.signType.locationSign:
						uni.showLoading({
							title: '签到中',
							mask: true,
						})
						console.log('Constant.signType.locationSign', Constant.signType.locationSign)
						result = await CourseBiz.locationSign(this, activity, {
							address: params.address,
							latitude: params.latitude,
							longitude: params.longitude
						})
						break;
					default:
						console.log('没有匹配到签到类型', type)
				}
				console.log(result)

				if (isShowToast) {
					uni.hideLoading()
					if (result !== true) {
						uni.showToast({
							title: result,
							position: 'center'
						})
						// plus.nativeUI.toast(result)
						return null;
					}
					// plus.nativeUI.toast('签到成功')
					uni.showToast({
						title: '签到成功',
						icon: 'success'
					})
				}
			},

			/**
			 * @description 从底部向上弹出操作菜单 操作选择成功之后
			 * @param {Object} index
			 */
			onActionSheetSelect(index) {
				switch (Number(index.tapIndex)) {
					case 0:
						// 普通签到
						this.allInOneSign(Constant.signType.generalSign, this.checkedActivity)
						break
					case 1:
						// 拍照签到
						this.$emit('openPhotoUploadPopup', this.checkedActivity)
						break
				}
			},


		},
	}
</script>

<style lang="scss" scoped>
	.content {
		flex: 1;
		height: 100%;
	}

	.first-item {
		margin-top: 12px;
	}

	.list-item {
		margin-left: 12px;
		margin-right: 12px;
		margin-bottom: 12px;
		padding: 10px;
		background-color: #fff;
		border-radius: 5px;

		.list-item-header {

			flex-direction: row;

			.item-img {
				justify-content: center;

				.item-img-img {
					width: 50px;
					height: 50px;
				}
			}

			.item-summary {
				flex-direction: column;
				width: 600rpx;
				margin-left: 5px;
			}
		}

		.list-item-body {

			.detail-item {
				flex-direction: row;
			}
		}
	}
</style>
