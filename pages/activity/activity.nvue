<template>
	<z-paging-swiper>
		<view slot="top">
			<u-tabs :list="tabList" @change="onChangeTab" :current="currentIndex"></u-tabs>
		</view>

		<swiper class="tab-view" @change="onChangeSwiper" :current="currentIndex">
			<swiper-item class="tab-bar-view" v-for="(tab,index) in tabList" :key="tab.current" :item-id="tab.current">
				<swiperPage class="swiper-page" :course-id="tab.courseId" :class-id='tab.classId'></swiperPage>
			</swiper-item>
		</swiper>
	</z-paging-swiper>
</template>

<script>
	import swiperPage from './nvue-swiper-page.nvue';
	import Constant from '@/const.js'

	import {
		mapState
	} from 'vuex'

	export default {
		components: {
			swiperPage
		},
		data() {
			return {
				currentIndex: 0,

				actionSheetIsShow: false,
				actionSheetActions: [{
						name: '普通签到',
						signType: Constant.signType.generalSign
					},
					{
						name: '拍照签到',
						signType: Constant.signType.photoSign,
					},
				],

			}
		},
		computed: {
			...mapState({
				courseList: s => s.course.courseList
			}),
			tabList() {
				return [
					// {
					// 	current: 0,
					// 	courseId: 0,
					// 	classId: 0,
					// 	name: '全部',
					// },
					...this.realTabList
				]
			},
			realTabList() {
				let val = this.courseList
				let list = []
				val.forEach((value, index) => {
					list.push({
						// 这里不能用courseId
						// 他在里面取值的时候是按照this.list[this.innerCurrent]
						// 其中this.innerCurrent就是这里设置的ID
						current: Number(index + 1),
						courseId: Number(value.courseId),
						classId: Number(value.classId),
						name: value.name,
					})
				})
				return list
			}
		},
		methods: {
			/**
			 * @description tabs被切换
			 * @param {Object} e
			 */
			onChangeTab(e) {
				this.currentIndex = e.index
			},
			/**
			 * @description swiper被切换
			 * @param {Object} e
			 */
			onChangeSwiper(e) {
				this.currentIndex = e.detail.current
			},
			/**
			 * @description pages/index/index 课程卡片路由传过来的参数
			 * @param {Object} params
			 */
			onSwitchToActivityTab(params) {
				console.log('onSwitchToActivityTab(params', params)
				let {
					index,
					courseId
				} = params
				index++;
				if (params &&
					this.tabList[index])
					this.currentIndex = index
			},
			async init() {
				// await this.$store.dispatch('course/refreshActivitiesOfAllCourse')
				uni.$on(Constant.globalEmitEvent.onSwitchToActivityTab, this.onSwitchToActivityTab)
			}
		},
		onLoad() {
			this.init()
		},
	}
</script>

<style lang="scss" scoped>
	.tab-view {
		flex: 1;
	}
</style>
