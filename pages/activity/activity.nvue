<template>
	<z-paging-swiper>
		<view slot="top">
			<u-tabs :list="tabList" @change="onChangeTab" :current="currentIndex"></u-tabs>
		</view>

		<swiper class="tab-view" @change="onChangeSwiper" :current="currentIndex">
			<swiper-item class="tab-bar-view" v-for="(tab,index) in tabList" :key="tab.current" :item-id="tab.current">
				<swiperPage class="swiper-page" :current-show-index='currentIndex' :my-index='tab.current'
					:course-id="tab.courseId" :class-id='tab.classId' @open-photo-upload-popup='openPhotoUploadPopup'>
				</swiperPage>
			</swiper-item>
		</swiper>

		<view slot='bottom'>
			<u-popup @close="onClosePhotoUploadPopup" :show="isShowPhotoUploadPopup" :closeOnClickOverlay="true">
				<view class="photo-upload-popup">
					<uni-title type="h2" title="请上传要签到的图片" align="center"></uni-title>
					<u-row justify="center" customStyle='margin:10px 0'>
						<u-col span="12" align="center">
							<u-upload @afterRead="onPhotoUploadAfterRead" :fileList="uploadFileList" accept="image"
								maxCount="1" width='200' height="200"></u-upload>
						</u-col>
					</u-row>
					<u-row justify="center">
						<u-col span="8">
							<u-button type="primary" text="确定" @click="confirmSign"></u-button>
						</u-col>
					</u-row>
				</view>
			</u-popup>
		</view>
	</z-paging-swiper>
</template>

<script>
	import swiperPage from './nvue-swiper-page.nvue';
	import Constant from '@/const.js'
	import CourseBiz from '@/biz/course.js'

	import {
		mapState
	} from 'vuex'

	export default {
		components: {
			swiperPage
		},
		data() {
			return {
				isShowPhotoUploadPopup: false,
				uploadFileList: [],
				checkedActivity: {},

				currentIndex: 0,

			}
		},
		computed: {
			...mapState({
				courseList: s => s.course.courseList
			}),
			tabList() {
				return [
					// {
					// 	current: 0,
					// 	courseId: 0,
					// 	classId: 0,
					// 	name: '全部',
					// },
					...this.realTabList
				]
			},
			realTabList() {
				let val = this.courseList
				let list = []
				val.forEach((value, index) => {
					list.push({
						// 这里不能用courseId
						// 他在里面取值的时候是按照this.list[this.innerCurrent]
						// 其中this.innerCurrent就是这里设置的ID
						current: Number(index),
						courseId: Number(value.courseId),
						classId: Number(value.classId),
						name: value.name,
					})
				})
				return list
			}
		},
		methods: {


			/**
			 * @description 确认选择该图片进行签到
			 */
			async confirmSign() {
				if (this.uploadFileList.length === 0) {
					uni.showToast({
						title: '请先上传图片',
						icon: 'error',
					})
					return false
				}
				let objectId = this.uploadFileList[0].objectId
				if (!objectId) {
					uni.showToast({
						title: '缺少图片信息',
						icon: 'error',
					})
					return false
				}
				console.log(`async confirmSign`, this.checkedActivity, objectId)
				uni.showLoading({
					title: '签到中',
					mask: true,
				})

				let responseData = await CourseBiz.photoSign(this,
					this.checkedActivity, objectId)
				uni.hideLoading()
				if (responseData !== true) {
					// 这里出问题了
					uni.showToast({
						title: responseData,
						position: 'center'
					})
					return null;
				}
				this.onClosePhotoUploadPopup()
				uni.showToast({
					title: '签到成功',
					icon: 'success'
				})

			},

			async onPhotoUploadAfterRead(e) {
				console.log(`async onPhotoUploadAfterRead`, e)
				this.uploadFileList.splice(0, 1, {
					...e.file,
					status: 'uploading',
					message: '压缩上传中'
				})


				/**
				 * @description 压缩图片成功回调
				 */
				const compressImageSuccessHandler = async ({
					tempFilePath
				}) => {
					console.log(`compressImageSuccessHandler `, tempFilePath)
					let uploadData = await CourseBiz.chaoxingPanUpload(this, this.checkedActivity,
						tempFilePath)
					console.log(`uploadData`, uploadData)
					if (uploadData?.objectId === undefined) {
						let item = this.uploadFileList[0]
						this.uploadFileList.splice(0, 1, Object.assign(item, {
							status: 'failed',
							message: '上传失败'
						}))
						throw new Error('上传图片失败')
					}
					console.log(`uploadData.previewUrl`, uploadData.previewUrl)
					uni.getImageInfo({
						src: uploadData.previewUrl,
						success: () => {
							let item = this.uploadFileList[0]
							this.uploadFileList.splice(0, 1, Object.assign(item, {
								status: 'success',
								message: '',
								objectId: uploadData.objectId
							}))
						},
						fail() {
							let item = this.uploadFileList[0]
							this.uploadFileList.splice(0, 1, Object.assign(item, {
								status: 'failed',
								message: '预览失败'
							}))
							plus.nativeUI.confirm(
								`请确认图片的格式是不是jpg或者png\n下面是图片地址：\n${uploadData.previewUrl}\n可以复制到浏览器打开看下是什么情况`,
								(e) => {
									if (e.index === 0)
										uni.setClipboardData({
											data: uploadData.previewUrl
										})
									else if (e.index === 1)
										uni.showToast({
											title: '取消签到',
											icon: 'error'
										})
								}, {
									title: '上传成功但获取预览图失败',
									buttons: ['复制链接', '知道了']
								})
						}
					})
				}

				uni.compressImage({
					src: e.file.url,
					success: compressImageSuccessHandler,
					fail: () => {
						let item = this.uploadFileList[0]
						this.uploadFileList.splice(0, 1, Object.assign(item, {
							status: 'failed',
							message: '压缩失败'
						}))
					}
				})
			},
			openPhotoUploadPopup(checkedActivity) {
				this.isShowPhotoUploadPopup = true
				this.checkedActivity = checkedActivity
				this.uploadFileList = []
			},
			onClosePhotoUploadPopup() {
				this.isShowPhotoUploadPopup = false
			},
			/**
			 * @description tabs被切换
			 * @param {Object} e
			 */
			onChangeTab(e) {
				this.currentIndex = e.index
			},
			/**
			 * @description swiper被切换
			 * @param {Object} e
			 */
			onChangeSwiper(e) {
				this.currentIndex = e.detail.current
			},
			/**
			 * @description pages/index/index 课程卡片路由传过来的参数
			 * @param {Object} params
			 */
			onSwitchToActivityTab(params) {
				console.log('onSwitchToActivityTab(params', params)
				let {
					index,
					courseId
				} = params
				// if (params &&
				// 	this.tabList[index])
				this.currentIndex = index
			},
			// async init() {
			// 	// await this.$store.dispatch('course/refreshActivitiesOfAllCourse')
			// }
		},
		onLoad() {
			uni.$on(Constant.globalEmitEvent.onSwitchToActivityTab, this.onSwitchToActivityTab)
		},
	}
</script>

<style lang="scss" scoped>
	.tab-view {
		flex: 1;
	}

	.photo-upload-popup {
		margin-top: 10px;
		margin-bottom: 20px;
	}
</style>
