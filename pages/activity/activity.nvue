<template>
	<view class="tabs">
		<u-sticky class="u-sticky" bgColor="#fff">
			<u-tabs :list="tabList" @change="onChangeTab" :current="currentIndex"></u-tabs>
		</u-sticky>

		<swiper class="tab-view" @change="onChangeSwiper" :current="currentIndex">
			<swiper-item class="tab-bar-view" v-for="(tab,index) in tabList" :key="tab.current" :item-id="tab.current">
				<swiperPage class="swiper-page" :course-id="tab.courseId" :u-toast='uToast'></swiperPage>
			</swiper-item>
		</swiper>
	</view>
</template>

<script>
	import swiperPage from './nvue-swiper-page.nvue';
	import Constant from '@/const.js'

	import {
		mapState
	} from 'vuex'

	export default {
		components: {
			swiperPage
		},
		data() {
			return {
				tabList: [{
					current: 0,
					courseId: 0,
					name: '全部',
				}],
				currentIndex: 0,


				actionSheetIsShow: false,
				actionSheetActions: [{
						name: '普通签到',
						signType: Constant.signType.generalSign
					},
					{
						name: '拍照签到',
						signType: Constant.signType.photoSign,
					},
				],
			}
		},
		computed: {
			courseList() {
				console.log(',courseList,this.$store.state.course', this.$store.state.course)
				return this.$store.state.course.courseList
			}
		},
		onShow() {},
		onLoad() {
			//这里要在mounted之前把列表填充好，不然会报错，Uncaught (in promise) TypeError: Cannot read properties of undefined (reading '0')
			// this.tabList.push({
			// 	current: 0,
			// 	name: '全部',
			// })
			this.loadData()
		},
		methods: {
			/**
			 * @description tabs被切换
			 * @param {Object} e
			 */
			onChangeTab(e) {
				this.currentIndex = e.index
			},
			/**
			 * @description swiper被切换
			 * @param {Object} e
			 */
			onChangeSwiper(e) {
				this.currentIndex = e.detail.current
			},
			/**
			 * @description pages/index/index 课程卡片路由传过来的参数
			 * @param {Object} params
			 */
			onSwitchToActivityTab(params) {
				console.log('onSwitchToActivityTab(params', params)
				let {
					index,
					courseId
				} = params
				index++;
				if (params &&
					this.tabList[index])
					this.currentIndex = index
			},
			async loadData() {
				if (this.courseList) {
					this.courseList.forEach((value, index) => {
						this.tabList.push({
							// 这里不能用courseId
							// 他在里面取值的时候是按照this.list[this.innerCurrent]
							// 其中this.innerCurrent就是这里设置的ID
							current: Number(index + 1),
							courseId: Number(value.courseId),
							name: value.name,
						})
					})
					// for (const courseListElement of this.courseList) {
					// 	this.tabList.push({
					// 		current: Number(courseListElement.courseId),
					// 		name: courseListElement.name,
					// 	})
					// }
				}
				this.currentIndex = this.tabList[0].current

				uni.$on(Constant.globalEmitEvent.onSwitchToActivityTab, this.onSwitchToActivityTab)
			}
		}
	}
</script>

<style lang="scss" scoped>
	.tabs {
		flex: 1;
	}

	.tab-view {
		flex: 1;
	}
</style>
