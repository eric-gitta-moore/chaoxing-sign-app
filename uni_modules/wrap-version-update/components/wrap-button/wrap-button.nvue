<template>
	<view @click="click" @touchcancel="touchcancel" @touchstart="touchstart" @touchend="touchend" :style="buttonStyle"
		class="flex-row justify-center items-center">
		<wrap-text :color="color" :size="size" :text="text" weight/>
	</view>
</template>

<script>
	import {
		styleInto
	} from '../../js/api'
	import wrapText from '../wrap-text/wrap-text'
	/**
	 * button 按钮
	 * @description 按钮组件
	 * @tutorial https://dnvue.dengqichang.cn/component/basic_component/n-button.html
	 * @property {Number, String} text 按钮名称
	 * @property {Number, String} size 名称大小
	 * @property {String} color 名称颜色
	 * @property {Number, String} width 宽度
	 * @property {Number, String} height 高度
	 * @property {String} background 背景颜色
	 * @property {String} disabled-background 禁用后背景颜色
	 * @property {String} gradient 渐变背景色，使用方式：right,#69c0ff,#1890ff（方向,颜色值,颜色值）
	 * @property {Number, String} radius 圆角
	 * @property {Boolean} disabled 是否禁用
	 * @property {Boolean} is-icon 是否使用图标，仅限内置图标库。当使用图标时，text属性即为图标名称
	 * @event {Function()} click 点击事件
	 */
	export default {
		name: "nButton",
		components: {
			wrapText
		},
		props: {
			text: {
				type: [Number, String], //文本
				default: 'DNVUE'
			},
			size: {
				type: [Number, String], //文本大小
				default: 30
			},
			color: {
				type: String, //文本颜色
				default: 'white'
			},
			width: {
				type: [Number, String], //宽度
				default: 520
			},
			height: {
				type: [Number, String], //高度
				default: 80
			},
			background: {
				type: String, //背景颜色
				default: '#0a84ec'
			},
			disabledBackground: {
				type: String, //禁用背景颜色
				default: '#d9d9d9'
			},
			gradient: { //渐变背景色
				type: String, //right,#69c0ff,#1890ff
				default: ''
			},
			radius: {
				type: [Number, String], //圆角
				default: 8
			},
			disabled: {
				type: Boolean, //禁用
				default: false
			},
			isIcon: {
				type: Boolean, //是否使用图标
				default: false
			}
		},
		data() {
			return {
				status: false
			}
		},
		computed: {
			buttonStyle() {
				let style = {
					background: this.disabled ? this.disabledBackground : this.background,
					width: `${this.width}rpx`,
					height: `${this.height}rpx`,
					borderRadius: `${this.radius}rpx`,
					opacity: this.status ? 0.8 : 1
				};
				if (this.gradient !== '' && !this.disabled) {
					let gradient = this.gradient.split(',');
					let gradientOne = gradient[1];
					let gradientTwo = gradient[2];
					style.backgroundImage = 'linear-gradient(to ' + gradient[0] + ',' + gradientOne + ',' + gradientTwo +
						')'
				};
				return styleInto(style);
			}
		},
		methods: {
			//触摸开始，多点触控，后面的手指同样会触发
			touchstart() {
				if (!this.disabled) {
					this.status = true;
				}
			},
			//触摸结束，手指离开屏幕时
			touchend() {
				this.status = false;
			},
			//触摸被取消，当系统停止跟踪触摸的时候触发
			touchcancel() {
				this.status = false; //触摸被打断时回填按钮状态
			},
			//点击事件
			click(e) {
				if (!this.disabled) {
					this.$emit("click", e)
				}
			}
		}
	}
</script>

<style>
	@import "../../css/index.scss";
</style>
